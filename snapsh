#!/bin/bash

## snapsh
## Copyright (C) 2020 Jarno Rankinen
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Environment set up:

TOPLEVEL="/root/btrfs-toplevel"
SNAPSHOTS_LOCATION="/root/btrfs-toplevel/test"

BTRFS_EXECUTABLE=$(which btrfs)
TIMESTAMP=$(date +%Y.%m.%d-%H:%M:%S)
SUBVOLUME="root"



help() {
    printf "Usage:
    snapsh [OPTIONS]

Options:
    -h, --help                      Display this help message

Exit codes:
	2 - Invalid options
    3 - Error creating subvolume\n"
}



snapshot() {

    EXIT_CODE=0
    root_check

    # Check that the subvolume storing snapshots exists
    if [[ ! -d ${SNAPSHOTS_LOCATION} ]]; then
        printf "Subvolume ${SNAPSHOTS_LOCATION} does not exist. Create it now?\n"
        read -p "y/n: "
        
        if [[ "${REPLY}" == "y" ]]; then
            ${BTRFS_EXECUTABLE} subvolume create ${SNAPSHOTS_LOCATION}
        else
            EXIT_CODE=3
        fi
    fi

    exit ${EXIT_CODE}
}



# Check for root permissions
root_check() {
    if [[ "$UID" -ne 0 ]]; then
        printf "This option needs root permission.\n"
        exit 3
    fi
}



# If no options are given, display help
if [[ "$#" -eq 0 ]]; then
	help
	exit 2
fi


# Options parsing:
OPTIONS=$(getopt -a -n snapsh -o hs: --long help,snapshot: -- "$@")

# Invalid options (getopt returns nonzero)
if [[ "$?" -ne 0 ]]; then
    printf "Error Parsing options\n"
    help
    exit 2
fi

#eval set -- "$OPTIONS"
while true; do
    case "$1" in

        -h | --help)
            help
            shift
            exit 0
            ;;

        -s | --snapshot)
            snapshot
            shift 2
            ;;

    esac
done

